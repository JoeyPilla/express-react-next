{"version":3,"file":"static/webpack/static\\development\\pages\\editDevice.js.dfc3769343e2406facae.hot-update.js","sources":["webpack:///./node_modules/indexof/index.js","webpack:///./node_modules/vm-browserify/index.js","webpack:///./pages/editDevice.js"],"sourcesContent":["\nvar indexOf = [].indexOf;\n\nmodule.exports = function(arr, obj){\n  if (indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};","var indexOf = require('indexof');\n\nvar Object_keys = function (obj) {\n    if (Object.keys) return Object.keys(obj)\n    else {\n        var res = [];\n        for (var key in obj) res.push(key)\n        return res;\n    }\n};\n\nvar forEach = function (xs, fn) {\n    if (xs.forEach) return xs.forEach(fn)\n    else for (var i = 0; i < xs.length; i++) {\n        fn(xs[i], i, xs);\n    }\n};\n\nvar defineProp = (function() {\n    try {\n        Object.defineProperty({}, '_', {});\n        return function(obj, name, value) {\n            Object.defineProperty(obj, name, {\n                writable: true,\n                enumerable: false,\n                configurable: true,\n                value: value\n            })\n        };\n    } catch(e) {\n        return function(obj, name, value) {\n            obj[name] = value;\n        };\n    }\n}());\n\nvar globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',\n'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',\n'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',\n'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',\n'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];\n\nfunction Context() {}\nContext.prototype = {};\n\nvar Script = exports.Script = function NodeScript (code) {\n    if (!(this instanceof Script)) return new Script(code);\n    this.code = code;\n};\n\nScript.prototype.runInContext = function (context) {\n    if (!(context instanceof Context)) {\n        throw new TypeError(\"needs a 'context' argument.\");\n    }\n    \n    var iframe = document.createElement('iframe');\n    if (!iframe.style) iframe.style = {};\n    iframe.style.display = 'none';\n    \n    document.body.appendChild(iframe);\n    \n    var win = iframe.contentWindow;\n    var wEval = win.eval, wExecScript = win.execScript;\n\n    if (!wEval && wExecScript) {\n        // win.eval() magically appears when this is called in IE:\n        wExecScript.call(win, 'null');\n        wEval = win.eval;\n    }\n    \n    forEach(Object_keys(context), function (key) {\n        win[key] = context[key];\n    });\n    forEach(globals, function (key) {\n        if (context[key]) {\n            win[key] = context[key];\n        }\n    });\n    \n    var winKeys = Object_keys(win);\n\n    var res = wEval.call(win, this.code);\n    \n    forEach(Object_keys(win), function (key) {\n        // Avoid copying circular objects like `top` and `window` by only\n        // updating existing context properties or new properties in the `win`\n        // that was only introduced after the eval.\n        if (key in context || indexOf(winKeys, key) === -1) {\n            context[key] = win[key];\n        }\n    });\n\n    forEach(globals, function (key) {\n        if (!(key in context)) {\n            defineProp(context, key, win[key]);\n        }\n    });\n    \n    document.body.removeChild(iframe);\n    \n    return res;\n};\n\nScript.prototype.runInThisContext = function () {\n    return eval(this.code); // maybe...\n};\n\nScript.prototype.runInNewContext = function (context) {\n    var ctx = Script.createContext(context);\n    var res = this.runInContext(ctx);\n\n    forEach(Object_keys(ctx), function (key) {\n        context[key] = ctx[key];\n    });\n\n    return res;\n};\n\nforEach(Object_keys(Script.prototype), function (name) {\n    exports[name] = Script[name] = function (code) {\n        var s = Script(code);\n        return s[name].apply(s, [].slice.call(arguments, 1));\n    };\n});\n\nexports.createScript = function (code) {\n    return exports.Script(code);\n};\n\nexports.createContext = Script.createContext = function (context) {\n    var copy = new Context();\n    if(typeof context === 'object') {\n        forEach(Object_keys(context), function (key) {\n            copy[key] = context[key];\n        });\n    }\n    return copy;\n};\n","import React, { Component } from 'react'\r\nimport Layout from '../components/layout';\r\nimport DeviceGridColumn from '../components/deviceGridColumn';\r\nimport { Form, Header, Icon, Input, Item, Button, Label, Grid } from 'semantic-ui-react';\r\nimport { runInThisContext } from 'vm';\r\n\r\nexport default class editDevice extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {},\r\n            files: []\r\n        }\r\n\r\n        this.handleFileChange = this.handleFileChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    static getInitialProps({ query: { id } }) {\r\n        return { id: id }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.id)\r\n        fetch(`/api/getDevice/${this.props.id}`)\r\n            .then(res => res.json())\r\n            .then(user => this.setState({ data: user.resp[0] }));\r\n    }\r\n\r\n    handleFileChange(file, name) {\r\n        var files = this.state.files;\r\n        var data = this.state.data;\r\n\r\n        switch (name) {\r\n            case 'Dieplot':\r\n                data.dieplotUpdateCount ? data.dieplotUpdateCount = data.dieplotUpdateCount++ : data.dieplotUpdateCount = 1;\r\n                data.dieplotLastUpdateDate = new Date();\r\n                data.dieplot = file.name;\r\n                break;\r\n            case 'Pinout':\r\n                data.pinoutUpdateCount ? data.pinoutUpdateCount = data.pinoutUpdateCount++ : data.pinoutUpdateCount = 1;\r\n                data.pinoutLastUpdateDate = new Date();\r\n                data.pinout = file.name;\r\n                break;\r\n            case 'Database':\r\n                data.databaseUpdateCount ? data.databaseUpdateCount = data.databaseUpdateCount++ : data.databaseUpdateCount = 1;\r\n                data.databaseLastUpdateDate = new Date();\r\n                data.database = file.name;\r\n                break;\r\n            case 'Assura':\r\n                data.assuraUpdateCount ? data.assuraUpdateCount = data.assuraUpdateCount++ : data.assuraUpdateCount = 1;\r\n                data.assuraLastUpdateDate = new Date();\r\n                data.assura = file.name;\r\n                break;\r\n            case 'Datasheet':\r\n                data.datasheetUpdateCount ? data.datasheetUpdateCount = data.datasheetUpdateCount++ : data.datasheetUpdateCount = 1;\r\n                data.datasheetLastUpdateDate = new Date();\r\n                data.datasheet = file.name;\r\n                break;\r\n            case 'EVM':\r\n                data.evmUpdateCount ? data.evmUpdateCount = data.evmUpdateCount++ : data.evmUpdateCount = 1;\r\n                data.evmLastUpdateDate = new Date();\r\n                data.evm = file.name;\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            data: data,\r\n            files: [...this.state.files, file]\r\n        })\r\n    }\r\n\r\n    handleSubmit(e) {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Layout>\r\n                    <Header as='h1' textAlign='center'>\r\n                        <Icon name='microchip' />\r\n                        {this.state.data.name}\r\n                    </Header>\r\n                    <Grid columns='equal' divided>\r\n                        <Grid.Row>\r\n                            <DeviceGridColumn\r\n                                name='Dieplot'\r\n                                file={this.state.data.dieplot}\r\n                                count={this.state.data.dieplotUpdateCount}\r\n                                date={this.state.data.dieplotLastUpdateDate}\r\n                                onChange={this.handleFileChange} />\r\n                            <DeviceGridColumn\r\n                                name='Pinout'\r\n                                file={this.state.data.pinout}\r\n                                count={this.state.data.pinoutUpdateCount}\r\n                                date={this.state.data.pinoutLastUpdateDate}\r\n                                onChange={this.handleFileChange} />\r\n                            <DeviceGridColumn\r\n                                name='Database'\r\n                                file={this.state.data.database}\r\n                                count={this.state.data.databaseUpdateCount}\r\n                                date={this.state.data.databaseLastUpdateDate}\r\n                                onChange={this.handleFileChange} />\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                            <DeviceGridColumn\r\n                                name='Assura'\r\n                                file={this.state.data.assura}\r\n                                count={this.state.data.assuraUpdateCount}\r\n                                date={this.state.data.assuraLastUpdateDate}\r\n                                onChange={this.handleFileChange} />\r\n                            <DeviceGridColumn\r\n                                name='Datasheet'\r\n                                file={this.state.data.datasheet}\r\n                                count={this.state.data.datasheetUpdateCount}\r\n                                date={this.state.data.datasheetLastUpdateDate}\r\n                                onChange={this.handleFileChange} />\r\n                            <DeviceGridColumn\r\n                                name='EVM'\r\n                                file={this.state.data.evm}\r\n                                count={this.state.data.evmUpdateCount}\r\n                                date={this.state.data.evmLastUpdateDate}\r\n                                onChange={this.handleFileChange} />\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                    <Button type='submit' onClick={this.handleFileChange}>Submit</Button>\r\n                </Layout>\r\n            </div>\r\n        )\r\n    }\r\n}"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AARA;AASA;AACA;;;AAKA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA9BA;AACA;AAgCA;AACA;AACA;AAFA;AAIA;;;AAEA;;;AAIA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAIA;;;AAhHA;AAAA;AACA;AAAA;AAAA;AACA;;;;AAdA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}